# Copyright (c) 2021-2024 [Ribose Inc](https://www.ribose.com).
# All rights reserved.
# This file is a part of tamatebako
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

name: Alpine

on:
  schedule:
    - cron: "0 9 * * 0"
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - 'macos-arm64.env'
      - 'macos-x86_64.env'
      - '.cirrus.yml'
      - '.github/workflows/*.yml'
      - '!.github/workflows/alpine.yml'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - 'macos-arm64.env'
      - 'macos-x86_64.env'
      - '.cirrus.yml'
      - '.github/workflows/*.yml'
      - '!.github/workflows/alpine.yml'
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

env:
  CACHE_VER: 5

jobs:
  build:
    name: alpine-${{ matrix.env.VER }} [CC ${{ matrix.env.CC }}, ASAN ${{ matrix.env.ASAN }}, ${{ matrix.env.LOG_LEVEL }}, OpenSSL ${{ matrix.openssl.name }}]
    runs-on: ubuntu-latest
    container:
      image: alpine:${{ matrix.env.VER }}
    strategy:
      fail-fast: false
      matrix:
        env:
          - { CC: gcc,    CXX: g++,     ASAN: 'OFF',  LOG_LEVEL: 'trace', VER: '3.17'  }
          - { CC: clang,  CXX: clang++, ASAN: 'OFF',  LOG_LEVEL: 'warn' , VER: '3.17'  }
        openssl:
          - { option: '-DOPENSSL_VERSION=1.1', name: '1.1.1' }
          - { option: '', name: '3.x' }
# Segfaults on GHA but works locally
# Comment out for now
#         - { CC: clang,  CXX: clang++, ASAN: 'ON',   LOG_LEVEL: 'warn' , VER: '3.17'  }
    env: ${{ matrix.env }}
    steps:
      - name: Install packages
# glog and double-conversion do not provide static versions so we build them locally
# fmt (10.x.x) is built by dwarfs script
# lz4-static apk installs a lbrary that requires lto plugin (binutil-gold) so we build it locally as well
        run: |
          apk --no-cache --upgrade add build-base cmake git bash   \
            autoconf boost-static boost-dev flex-dev bison         \
            binutils-dev libevent-dev acl-dev xz-static            \
            lz4-dev openssl-dev zlib-dev gflags-dev jemalloc-dev   \
            libunwind-dev libdwarf-dev elfutils-dev fmt-dev        \
            libevent-static openssl-libs-static xz-dev             \
            zlib-static libunwind-static acl-static tar brotli-dev \
            brotli-static

      - name: Install clang
        if: ${{ matrix.env.CC == 'clang' }}
        run: apk --no-cache --upgrade add clang

      - name: Install lz4-static
        if: ${{ matrix.env.CC == 'gcc' }}
        run: apk --no-cache --upgrade add lz4-static

      - name: Install ASAN libraries
        if: ${{ matrix.env.ASAN == 'ON' }}
        run: apk --no-cache --upgrade add compiler-rt

      - name: Declare directory safe
        run: git config --global --add safe.directory "$(pwd)"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup environment
        run: |
          cat common.env ubuntu.env >> $GITHUB_ENV
          echo "CORES=$(nproc --all)" >> $GITHUB_ENV
          echo "MAKEFLAGS=j$(nproc --all)" >> $GITHUB_ENV

      - name: Create deps folder
        run: mkdir ${{env.DEPS}}

      - name: Process cache
        uses: actions/cache@v4
        with:
          path: ${{env.DEPS}}
          key:  alpine-${{ matrix.env.VER }}-${{ matrix.env.CC }}-${{ hashFiles('**/common.env') }}-${{ env.ASAN }}-${{ env.LOG_LEVEL }}-${{ matrix.openssl.name }}-v${{ env.CACHE_VER }}

      - name: Configure
        run: cmake -B build -DWITH_TESTS=ON -DWITH_ASAN=${{ env.ASAN }} -DTESTS_LOG_LEVEL=${{ env.LOG_LEVEL }} ${{ matrix.openssl.option }}

      - name: Build
        run: cmake --build build --parallel "$CORES"

      - name: Run unit tests
        run: ctest --test-dir build --output-on-failure --parallel "$CORES"

      - name: Checkout shell test framework
        if: ${{ env.COVERAGE != 'ON' && env.ASAN != 'ON' }}
        uses: actions/checkout@v4
        with:
          repository: kward/shunit2
          path: tests/shunit2
          fetch-depth: 1

      - name: Run additional tests
        if: ${{ env.COVERAGE != 'ON' && env.ASAN != 'ON' }}
        run:  tests/scripts/tests.sh
