# Copyright (c) 2021-2022 [Ribose Inc](https://www.ribose.com).
# All rights reserved.
# This file is a part of tamatebako
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

name: Alpine

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - '.github/workflows/ubuntu.yml'
      - '.github/workflows/macos.yml'
      - '.github/workflows/macos-arm64.yml'
      - 'cmake/def_darwin_env.cmake'
      - '.github/workflows/lint.yml'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**.adoc'
      - '**.md'
      - '.github/workflows/ubuntu.yml'
      - '.github/workflows/macos.yml'
      - '.github/workflows/macos-arm64.yml'
      - 'cmake/def_darwin_env.cmake'
      - '.github/workflows/lint.yml'
  workflow_dispatch:

env:
# The folder for dwarfs and other dependenies
  DEPS: deps
  CACHE_VER: "14"
# GitHub dependencies'
  INCBIN_TAG: "348e36b"
  DWARFS_TAG: "tebako-v0.2.0"
  LIBARCHIVE_VER: "3.5.2"
# Misc
  DEBIAN_FRONTEND: "noninteractive"
  TZ: "Etc/UTC"
  MAKEFLAGS: -j4

jobs:
  build:
    name: alpine-latest [CC ${{ matrix.env.CC }}, ASAN ${{ matrix.env.ASAN }}, ${{ matrix.env.LOG_LEVEL }} ]
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    strategy:
      fail-fast: false
      matrix:
        env:
          - CC: gcc
            CXX: g++
            ASAN: 'OFF'
            LOG_LEVEL: 'trace'
          - CC: clang
            CXX: clang++
            ASAN: 'OFF'
            LOG_LEVEL: 'warn'
# ASAN libraries are not there for clang 12, but it looks like it will be ready with clng 13
# (as a part of compiler-rt package)
#          - CC: clang
#            CXX: clang++
#            ASAN: 'ON'
#            LOG_LEVEL: 'warn'
# 'compiler-rt' apk is required to support ASAN
    env: ${{ matrix.env }}
    steps:
      - name: Install packages
# glog, fmt and double-conversion
# do not provide static versions so we build them locally
# using apk in parallel would create a risk of version mismatch since
# folly 'prefers' globally installed shared library
# ideal solution would be to build from source static libraries for
# already installed shared versions but it may be overcomplicated
        run: |
          apk --no-cache --upgrade add build-base cmake git bash   \
            autoconf boost-static boost-dev flex-dev bison         \
            binutils-dev libarchive-dev libevent-dev acl-dev       \
            lz4-dev openssl-dev zlib-dev gflags-dev                \
            libunwind-dev libdwarf-dev elfutils-dev                \
            libevent-static openssl-libs-static lz4-static xz-dev  \
            zlib-static libunwind-static acl-static tar

      - name: Install clang
        if: ${{ matrix.env.CC == 'clang' }}
        run: |
          apk --no-cache --upgrade add clang

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Patch system includes
        if: ${{ matrix.env.CC == 'clang' }}
        run: tools/ci-scripts/patch-system-includes.sh

      - name: Create deps folder
        run: |
          mkdir ${{env.DEPS}}
          echo "Keys" > key.txt
          echo ${{ env.DWARFS_TAG }} >> key.txt
          echo ${{ env.INCBIN_TAG }} >> key.txt
          echo ${{ env.LIBARCHIVE_VER }} >> key.txt

      - name: Process cache
        uses: actions/cache@v2
        with:
          path: ${{env.DEPS}}
          key:  alpine-latest-${{ matrix.env.CC }}-${{ hashFiles('key.txt') }}-v${{ env.CACHE_VER }}

      - name: Build libjemalloc
        run: |
          wget -q https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
          tar -xf jemalloc-5.2.1.tar.bz2
          cd jemalloc-5.2.1
          ./configure
          make -j4
          make install

      - name: Configure
        run: cmake . -DWITH_TESTS=ON -DWITH_ASAN=${{ env.ASAN }} -DTESTS_LOG_LEVEL=${{ env.LOG_LEVEL }}

      - name: Build
        run: cmake --build .

      - name: Run unit tests
        run: make test

      - name: Checkout shell test framework
        uses: actions/checkout@v2
        with:
          repository: kward/shunit2
          path: tests/shunit2
          fetch-depth: 1

      - name: Run additional tests
        run:  tests/scripts/tests.sh
